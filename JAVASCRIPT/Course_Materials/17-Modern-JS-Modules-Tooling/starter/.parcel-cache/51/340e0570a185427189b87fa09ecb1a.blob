var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseGetTagJs = require('./_baseGetTag.js');
var _baseGetTagJsDefault = _parcelHelpers.interopDefault(_baseGetTagJs);
var _getPrototypeJs = require('./_getPrototype.js');
var _getPrototypeJsDefault = _parcelHelpers.interopDefault(_getPrototypeJs);
var _isObjectLikeJs = require('./isObjectLike.js');
var _isObjectLikeJsDefault = _parcelHelpers.interopDefault(_isObjectLikeJs);
/** `Object#toString` result references.*/
var objectTag = '[object Object]';
/** Used for built-in method references.*/
var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions.*/
var funcToString = funcProto.toString;
/** Used to check objects for own properties.*/
var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor.*/
var objectCtorString = funcToString.call(Object);
/**
* Checks if `value` is a plain object, that is, an object created by the
* `Object` constructor or one with a `[[Prototype]]` of `null`.
*
* @static
* @memberOf _
* @since 0.8.0
* @category Lang
* @param {*} value The value to check.
* @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
* @example
*
* function Foo() {
*   this.a = 1;
* }
*
* _.isPlainObject(new Foo);
* // => false
*
* _.isPlainObject([1, 2, 3]);
* // => false
*
* _.isPlainObject({ 'x': 0, 'y': 0 });
* // => true
*
* _.isPlainObject(Object.create(null));
* // => true
*/
function isPlainObject(value) {
  if (!_isObjectLikeJsDefault.default(value) || _baseGetTagJsDefault.default(value) != objectTag) {
    return false;
  }
  var proto = _getPrototypeJsDefault.default(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
exports.default = isPlainObject;
