var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _toIntegerJs = require('./toInteger.js');
var _toIntegerJsDefault = _parcelHelpers.interopDefault(_toIntegerJs);
var _toLengthJs = require('./toLength.js');
var _toLengthJsDefault = _parcelHelpers.interopDefault(_toLengthJs);
/**
* The base implementation of `_.fill` without an iteratee call guard.
*
* @private
* @param {Array} array The array to fill.
* @param {*} value The value to fill `array` with.
* @param {number} [start=0] The start position.
* @param {number} [end=array.length] The end position.
* @returns {Array} Returns `array`.
*/
function baseFill(array, value, start, end) {
  var length = array.length;
  start = _toIntegerJsDefault.default(start);
  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }
  end = end === undefined || end > length ? length : _toIntegerJsDefault.default(end);
  if (end < 0) {
    end += length;
  }
  end = start > end ? 0 : _toLengthJsDefault.default(end);
  while (start < end) {
    array[start++] = value;
  }
  return array;
}
exports.default = baseFill;
