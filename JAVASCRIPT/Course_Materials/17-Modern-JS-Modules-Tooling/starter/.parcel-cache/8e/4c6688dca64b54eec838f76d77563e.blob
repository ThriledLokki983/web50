var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _isObjectJs = require('./isObject.js');
var _isObjectJsDefault = _parcelHelpers.interopDefault(_isObjectJs);
var _isPrototypeJs = require('./_isPrototype.js');
var _isPrototypeJsDefault = _parcelHelpers.interopDefault(_isPrototypeJs);
var _nativeKeysInJs = require('./_nativeKeysIn.js');
var _nativeKeysInJsDefault = _parcelHelpers.interopDefault(_nativeKeysInJs);
/** Used for built-in method references.*/
var objectProto = Object.prototype;
/** Used to check objects for own properties.*/
var hasOwnProperty = objectProto.hasOwnProperty;
/**
* The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
*
* @private
* @param {Object} object The object to query.
* @returns {Array} Returns the array of property names.
*/
function baseKeysIn(object) {
  if (!_isObjectJsDefault.default(object)) {
    return _nativeKeysInJsDefault.default(object);
  }
  var isProto = _isPrototypeJsDefault.default(object), result = [];
  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}
exports.default = baseKeysIn;
