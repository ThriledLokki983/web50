var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require('./_arrayMap.js');
var _arrayMapJsDefault = _parcelHelpers.interopDefault(_arrayMapJs);
var _baseAtJs = require('./_baseAt.js');
var _baseAtJsDefault = _parcelHelpers.interopDefault(_baseAtJs);
var _basePullAtJs = require('./_basePullAt.js');
var _basePullAtJsDefault = _parcelHelpers.interopDefault(_basePullAtJs);
var _compareAscendingJs = require('./_compareAscending.js');
var _compareAscendingJsDefault = _parcelHelpers.interopDefault(_compareAscendingJs);
var _flatRestJs = require('./_flatRest.js');
var _flatRestJsDefault = _parcelHelpers.interopDefault(_flatRestJs);
var _isIndexJs = require('./_isIndex.js');
var _isIndexJsDefault = _parcelHelpers.interopDefault(_isIndexJs);
/**
* Removes elements from `array` corresponding to `indexes` and returns an
* array of removed elements.
*
* **Note:** Unlike `_.at`, this method mutates `array`.
*
* @static
* @memberOf _
* @since 3.0.0
* @category Array
* @param {Array} array The array to modify.
* @param {...(number|number[])} [indexes] The indexes of elements to remove.
* @returns {Array} Returns the new array of removed elements.
* @example
*
* var array = ['a', 'b', 'c', 'd'];
* var pulled = _.pullAt(array, [1, 3]);
*
* console.log(array);
* // => ['a', 'c']
*
* console.log(pulled);
* // => ['b', 'd']
*/
var pullAt = _flatRestJsDefault.default(function (array, indexes) {
  var length = array == null ? 0 : array.length, result = _baseAtJsDefault.default(array, indexes);
  _basePullAtJsDefault.default(array, _arrayMapJsDefault.default(indexes, function (index) {
    return _isIndexJsDefault.default(index, length) ? +index : index;
  }).sort(_compareAscendingJsDefault.default));
  return result;
});
exports.default = pullAt;
