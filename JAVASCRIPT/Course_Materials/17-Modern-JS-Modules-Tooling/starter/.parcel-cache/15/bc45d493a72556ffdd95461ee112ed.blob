var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _SetCacheJs = require('./_SetCache.js');
var _SetCacheJsDefault = _parcelHelpers.interopDefault(_SetCacheJs);
var _arrayIncludesJs = require('./_arrayIncludes.js');
var _arrayIncludesJsDefault = _parcelHelpers.interopDefault(_arrayIncludesJs);
var _arrayIncludesWithJs = require('./_arrayIncludesWith.js');
var _arrayIncludesWithJsDefault = _parcelHelpers.interopDefault(_arrayIncludesWithJs);
var _arrayMapJs = require('./_arrayMap.js');
var _arrayMapJsDefault = _parcelHelpers.interopDefault(_arrayMapJs);
var _baseUnaryJs = require('./_baseUnary.js');
var _baseUnaryJsDefault = _parcelHelpers.interopDefault(_baseUnaryJs);
var _cacheHasJs = require('./_cacheHas.js');
var _cacheHasJsDefault = _parcelHelpers.interopDefault(_cacheHasJs);
/** Used as the size to enable large array optimizations.*/
var LARGE_ARRAY_SIZE = 200;
/**
* The base implementation of methods like `_.difference` without support
* for excluding multiple arrays or iteratee shorthands.
*
* @private
* @param {Array} array The array to inspect.
* @param {Array} values The values to exclude.
* @param {Function} [iteratee] The iteratee invoked per element.
* @param {Function} [comparator] The comparator invoked per element.
* @returns {Array} Returns the new array of filtered values.
*/
function baseDifference(array, values, iteratee, comparator) {
  var index = -1, includes = _arrayIncludesJsDefault.default, isCommon = true, length = array.length, result = [], valuesLength = values.length;
  if (!length) {
    return result;
  }
  if (iteratee) {
    values = _arrayMapJsDefault.default(values, _baseUnaryJsDefault.default(iteratee));
  }
  if (comparator) {
    includes = _arrayIncludesWithJsDefault.default;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = _cacheHasJsDefault.default;
    isCommon = false;
    values = new _SetCacheJsDefault.default(values);
  }
  outer: while (++index < length) {
    var value = array[index], computed = iteratee == null ? value : iteratee(value);
    value = comparator || value !== 0 ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    } else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}
exports.default = baseDifference;
