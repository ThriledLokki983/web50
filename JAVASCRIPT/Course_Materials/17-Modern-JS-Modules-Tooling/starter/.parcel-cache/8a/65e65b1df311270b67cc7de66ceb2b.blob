var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _LazyWrapperJs = require('./_LazyWrapper.js');
var _LazyWrapperJsDefault = _parcelHelpers.interopDefault(_LazyWrapperJs);
var _LodashWrapperJs = require('./_LodashWrapper.js');
var _LodashWrapperJsDefault = _parcelHelpers.interopDefault(_LodashWrapperJs);
var _baseAtJs = require('./_baseAt.js');
var _baseAtJsDefault = _parcelHelpers.interopDefault(_baseAtJs);
var _flatRestJs = require('./_flatRest.js');
var _flatRestJsDefault = _parcelHelpers.interopDefault(_flatRestJs);
var _isIndexJs = require('./_isIndex.js');
var _isIndexJsDefault = _parcelHelpers.interopDefault(_isIndexJs);
var _thruJs = require('./thru.js');
var _thruJsDefault = _parcelHelpers.interopDefault(_thruJs);
/**
* This method is the wrapper version of `_.at`.
*
* @name at
* @memberOf _
* @since 1.0.0
* @category Seq
* @param {...(string|string[])} [paths] The property paths to pick.
* @returns {Object} Returns the new `lodash` wrapper instance.
* @example
*
* var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
*
* _(object).at(['a[0].b.c', 'a[1]']).value();
* // => [3, 4]
*/
var wrapperAt = _flatRestJsDefault.default(function (paths) {
  var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function (object) {
    return _baseAtJsDefault.default(object, paths);
  };
  if (length > 1 || this.__actions__.length || !(value instanceof _LazyWrapperJsDefault.default) || !_isIndexJsDefault.default(start)) {
    return this.thru(interceptor);
  }
  value = value.slice(start, +start + (length ? 1 : 0));
  value.__actions__.push({
    'func': _thruJsDefault.default,
    'args': [interceptor],
    'thisArg': undefined
  });
  return new _LodashWrapperJsDefault.default(value, this.__chain__).thru(function (array) {
    if (length && !array.length) {
      array.push(undefined);
    }
    return array;
  });
});
exports.default = wrapperAt;
