var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _asciiWordsJs = require('./_asciiWords.js');
var _asciiWordsJsDefault = _parcelHelpers.interopDefault(_asciiWordsJs);
var _hasUnicodeWordJs = require('./_hasUnicodeWord.js');
var _hasUnicodeWordJsDefault = _parcelHelpers.interopDefault(_hasUnicodeWordJs);
var _toStringJs = require('./toString.js');
var _toStringJsDefault = _parcelHelpers.interopDefault(_toStringJs);
var _unicodeWordsJs = require('./_unicodeWords.js');
var _unicodeWordsJsDefault = _parcelHelpers.interopDefault(_unicodeWordsJs);
/**
* Splits `string` into an array of its words.
*
* @static
* @memberOf _
* @since 3.0.0
* @category String
* @param {string} [string=''] The string to inspect.
* @param {RegExp|string} [pattern] The pattern to match words.
* @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
* @returns {Array} Returns the words of `string`.
* @example
*
* _.words('fred, barney, & pebbles');
* // => ['fred', 'barney', 'pebbles']
*
* _.words('fred, barney, & pebbles', /[^, ]+/g);
* // => ['fred', 'barney', '&', 'pebbles']
*/
function words(string, pattern, guard) {
  string = _toStringJsDefault.default(string);
  pattern = guard ? undefined : pattern;
  if (pattern === undefined) {
    return _hasUnicodeWordJsDefault.default(string) ? _unicodeWordsJsDefault.default(string) : _asciiWordsJsDefault.default(string);
  }
  return string.match(pattern) || [];
}
exports.default = words;
