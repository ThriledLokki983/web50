var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _arrayFilterJs = require('./_arrayFilter.js');
var _arrayFilterJsDefault = _parcelHelpers.interopDefault(_arrayFilterJs);
var _baseFilterJs = require('./_baseFilter.js');
var _baseFilterJsDefault = _parcelHelpers.interopDefault(_baseFilterJs);
var _baseIterateeJs = require('./_baseIteratee.js');
var _baseIterateeJsDefault = _parcelHelpers.interopDefault(_baseIterateeJs);
var _isArrayJs = require('./isArray.js');
var _isArrayJsDefault = _parcelHelpers.interopDefault(_isArrayJs);
var _negateJs = require('./negate.js');
var _negateJsDefault = _parcelHelpers.interopDefault(_negateJs);
/**
* The opposite of `_.filter`; this method returns the elements of `collection`
* that `predicate` does **not** return truthy for.
*
* @static
* @memberOf _
* @since 0.1.0
* @category Collection
* @param {Array|Object} collection The collection to iterate over.
* @param {Function} [predicate=_.identity] The function invoked per iteration.
* @returns {Array} Returns the new filtered array.
* @see _.filter
* @example
*
* var users = [
*   { 'user': 'barney', 'age': 36, 'active': false },
*   { 'user': 'fred',   'age': 40, 'active': true }
* ];
*
* _.reject(users, function(o) { return !o.active; });
* // => objects for ['fred']
*
* // The `_.matches` iteratee shorthand.
* _.reject(users, { 'age': 40, 'active': true });
* // => objects for ['barney']
*
* // The `_.matchesProperty` iteratee shorthand.
* _.reject(users, ['active', false]);
* // => objects for ['fred']
*
* // The `_.property` iteratee shorthand.
* _.reject(users, 'active');
* // => objects for ['barney']
*/
function reject(collection, predicate) {
  var func = _isArrayJsDefault.default(collection) ? _arrayFilterJsDefault.default : _baseFilterJsDefault.default;
  return func(collection, _negateJsDefault.default(_baseIterateeJsDefault.default(predicate, 3)));
}
exports.default = reject;
