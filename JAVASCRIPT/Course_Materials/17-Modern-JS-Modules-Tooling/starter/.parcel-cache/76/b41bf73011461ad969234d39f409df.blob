var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseRepeatJs = require('./_baseRepeat.js');
var _baseRepeatJsDefault = _parcelHelpers.interopDefault(_baseRepeatJs);
var _baseToStringJs = require('./_baseToString.js');
var _baseToStringJsDefault = _parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require('./_castSlice.js');
var _castSliceJsDefault = _parcelHelpers.interopDefault(_castSliceJs);
var _hasUnicodeJs = require('./_hasUnicode.js');
var _hasUnicodeJsDefault = _parcelHelpers.interopDefault(_hasUnicodeJs);
var _stringSizeJs = require('./_stringSize.js');
var _stringSizeJsDefault = _parcelHelpers.interopDefault(_stringSizeJs);
var _stringToArrayJs = require('./_stringToArray.js');
var _stringToArrayJsDefault = _parcelHelpers.interopDefault(_stringToArrayJs);
/*Built-in method references for those with the same name as other `lodash` methods.*/
var nativeCeil = Math.ceil;
/**
* Creates the padding for `string` based on `length`. The `chars` string
* is truncated if the number of characters exceeds `length`.
*
* @private
* @param {number} length The padding length.
* @param {string} [chars=' '] The string used as padding.
* @returns {string} Returns the padding for `string`.
*/
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : _baseToStringJsDefault.default(chars);
  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? _baseRepeatJsDefault.default(chars, length) : chars;
  }
  var result = _baseRepeatJsDefault.default(chars, nativeCeil(length / _stringSizeJsDefault.default(chars)));
  return _hasUnicodeJsDefault.default(chars) ? _castSliceJsDefault.default(_stringToArrayJsDefault.default(result), 0, length).join('') : result.slice(0, length);
}
exports.default = createPadding;
