var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _LazyWrapperJs = require('./_LazyWrapper.js');
var _LazyWrapperJsDefault = _parcelHelpers.interopDefault(_LazyWrapperJs);
var _LodashWrapperJs = require('./_LodashWrapper.js');
var _LodashWrapperJsDefault = _parcelHelpers.interopDefault(_LodashWrapperJs);
var _reverseJs = require('./reverse.js');
var _reverseJsDefault = _parcelHelpers.interopDefault(_reverseJs);
var _thruJs = require('./thru.js');
var _thruJsDefault = _parcelHelpers.interopDefault(_thruJs);
/**
* This method is the wrapper version of `_.reverse`.
*
* **Note:** This method mutates the wrapped array.
*
* @name reverse
* @memberOf _
* @since 0.1.0
* @category Seq
* @returns {Object} Returns the new `lodash` wrapper instance.
* @example
*
* var array = [1, 2, 3];
*
* _(array).reverse().value()
* // => [3, 2, 1]
*
* console.log(array);
* // => [3, 2, 1]
*/
function wrapperReverse() {
  var value = this.__wrapped__;
  if (value instanceof _LazyWrapperJsDefault.default) {
    var wrapped = value;
    if (this.__actions__.length) {
      wrapped = new _LazyWrapperJsDefault.default(this);
    }
    wrapped = wrapped.reverse();
    wrapped.__actions__.push({
      'func': _thruJsDefault.default,
      'args': [_reverseJsDefault.default],
      'thisArg': undefined
    });
    return new _LodashWrapperJsDefault.default(wrapped, this.__chain__);
  }
  return this.thru(_reverseJsDefault.default);
}
exports.default = wrapperReverse;
