var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require('./_baseRest.js');
var _baseRestJsDefault = _parcelHelpers.interopDefault(_baseRestJs);
var _createWrapJs = require('./_createWrap.js');
var _createWrapJsDefault = _parcelHelpers.interopDefault(_createWrapJs);
var _getHolderJs = require('./_getHolder.js');
var _getHolderJsDefault = _parcelHelpers.interopDefault(_getHolderJs);
var _replaceHoldersJs = require('./_replaceHolders.js');
var _replaceHoldersJsDefault = _parcelHelpers.interopDefault(_replaceHoldersJs);
/** Used to compose bitmasks for function metadata.*/
var WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
* This method is like `_.partial` except that partially applied arguments
* are appended to the arguments it receives.
*
* The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
* builds, may be used as a placeholder for partially applied arguments.
*
* **Note:** This method doesn't set the "length" property of partially
* applied functions.
*
* @static
* @memberOf _
* @since 1.0.0
* @category Function
* @param {Function} func The function to partially apply arguments to.
* @param {...*} [partials] The arguments to be partially applied.
* @returns {Function} Returns the new partially applied function.
* @example
*
* function greet(greeting, name) {
*   return greeting + ' ' + name;
* }
*
* var greetFred = _.partialRight(greet, 'fred');
* greetFred('hi');
* // => 'hi fred'
*
* // Partially applied with placeholders.
* var sayHelloTo = _.partialRight(greet, 'hello', _);
* sayHelloTo('fred');
* // => 'hello fred'
*/
var partialRight = _baseRestJsDefault.default(function (func, partials) {
  var holders = _replaceHoldersJsDefault.default(partials, _getHolderJsDefault.default(partialRight));
  return _createWrapJsDefault.default(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
});
// Assign default placeholders.
partialRight.placeholder = {};
exports.default = partialRight;
