var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _createPaddingJs = require('./_createPadding.js');
var _createPaddingJsDefault = _parcelHelpers.interopDefault(_createPaddingJs);
var _stringSizeJs = require('./_stringSize.js');
var _stringSizeJsDefault = _parcelHelpers.interopDefault(_stringSizeJs);
var _toIntegerJs = require('./toInteger.js');
var _toIntegerJsDefault = _parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require('./toString.js');
var _toStringJsDefault = _parcelHelpers.interopDefault(_toStringJs);
/**
* Pads `string` on the right side if it's shorter than `length`. Padding
* characters are truncated if they exceed `length`.
*
* @static
* @memberOf _
* @since 4.0.0
* @category String
* @param {string} [string=''] The string to pad.
* @param {number} [length=0] The padding length.
* @param {string} [chars=' '] The string used as padding.
* @returns {string} Returns the padded string.
* @example
*
* _.padEnd('abc', 6);
* // => 'abc   '
*
* _.padEnd('abc', 6, '_-');
* // => 'abc_-_'
*
* _.padEnd('abc', 3);
* // => 'abc'
*/
function padEnd(string, length, chars) {
  string = _toStringJsDefault.default(string);
  length = _toIntegerJsDefault.default(length);
  var strLength = length ? _stringSizeJsDefault.default(string) : 0;
  return length && strLength < length ? string + _createPaddingJsDefault.default(length - strLength, chars) : string;
}
exports.default = padEnd;
