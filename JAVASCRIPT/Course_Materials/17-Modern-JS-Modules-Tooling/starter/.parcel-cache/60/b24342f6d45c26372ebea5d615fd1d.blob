var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _arrayMapJs = require('./_arrayMap.js');
var _arrayMapJsDefault = _parcelHelpers.interopDefault(_arrayMapJs);
var _baseIterateeJs = require('./_baseIteratee.js');
var _baseIterateeJsDefault = _parcelHelpers.interopDefault(_baseIterateeJs);
var _basePickByJs = require('./_basePickBy.js');
var _basePickByJsDefault = _parcelHelpers.interopDefault(_basePickByJs);
var _getAllKeysInJs = require('./_getAllKeysIn.js');
var _getAllKeysInJsDefault = _parcelHelpers.interopDefault(_getAllKeysInJs);
/**
* Creates an object composed of the `object` properties `predicate` returns
* truthy for. The predicate is invoked with two arguments: (value, key).
*
* @static
* @memberOf _
* @since 4.0.0
* @category Object
* @param {Object} object The source object.
* @param {Function} [predicate=_.identity] The function invoked per property.
* @returns {Object} Returns the new object.
* @example
*
* var object = { 'a': 1, 'b': '2', 'c': 3 };
*
* _.pickBy(object, _.isNumber);
* // => { 'a': 1, 'c': 3 }
*/
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = _arrayMapJsDefault.default(_getAllKeysInJsDefault.default(object), function (prop) {
    return [prop];
  });
  predicate = _baseIterateeJsDefault.default(predicate);
  return _basePickByJsDefault.default(object, props, function (value, path) {
    return predicate(value, path[0]);
  });
}
exports.default = pickBy;
