var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseRestJs = require('./_baseRest.js');
var _baseRestJsDefault = _parcelHelpers.interopDefault(_baseRestJs);
var _eqJs = require('./eq.js');
var _eqJsDefault = _parcelHelpers.interopDefault(_eqJs);
var _isIterateeCallJs = require('./_isIterateeCall.js');
var _isIterateeCallJsDefault = _parcelHelpers.interopDefault(_isIterateeCallJs);
var _keysInJs = require('./keysIn.js');
var _keysInJsDefault = _parcelHelpers.interopDefault(_keysInJs);
/** Used for built-in method references.*/
var objectProto = Object.prototype;
/** Used to check objects for own properties.*/
var hasOwnProperty = objectProto.hasOwnProperty;
/**
* Assigns own and inherited enumerable string keyed properties of source
* objects to the destination object for all destination properties that
* resolve to `undefined`. Source objects are applied from left to right.
* Once a property is set, additional values of the same property are ignored.
*
* **Note:** This method mutates `object`.
*
* @static
* @since 0.1.0
* @memberOf _
* @category Object
* @param {Object} object The destination object.
* @param {...Object} [sources] The source objects.
* @returns {Object} Returns `object`.
* @see _.defaultsDeep
* @example
*
* _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
* // => { 'a': 1, 'b': 2 }
*/
var defaults = _baseRestJsDefault.default(function (object, sources) {
  object = Object(object);
  var index = -1;
  var length = sources.length;
  var guard = length > 2 ? sources[2] : undefined;
  if (guard && _isIterateeCallJsDefault.default(sources[0], sources[1], guard)) {
    length = 1;
  }
  while (++index < length) {
    var source = sources[index];
    var props = _keysInJsDefault.default(source);
    var propsIndex = -1;
    var propsLength = props.length;
    while (++propsIndex < propsLength) {
      var key = props[propsIndex];
      var value = object[key];
      if (value === undefined || _eqJsDefault.default(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
        object[key] = source[key];
      }
    }
  }
  return object;
});
exports.default = defaults;
