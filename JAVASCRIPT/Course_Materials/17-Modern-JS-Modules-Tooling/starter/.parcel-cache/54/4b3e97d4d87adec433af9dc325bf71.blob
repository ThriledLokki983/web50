var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseIsEqualJs = require('./_baseIsEqual.js');
var _baseIsEqualJsDefault = _parcelHelpers.interopDefault(_baseIsEqualJs);
var _getJs = require('./get.js');
var _getJsDefault = _parcelHelpers.interopDefault(_getJs);
var _hasInJs = require('./hasIn.js');
var _hasInJsDefault = _parcelHelpers.interopDefault(_hasInJs);
var _isKeyJs = require('./_isKey.js');
var _isKeyJsDefault = _parcelHelpers.interopDefault(_isKeyJs);
var _isStrictComparableJs = require('./_isStrictComparable.js');
var _isStrictComparableJsDefault = _parcelHelpers.interopDefault(_isStrictComparableJs);
var _matchesStrictComparableJs = require('./_matchesStrictComparable.js');
var _matchesStrictComparableJsDefault = _parcelHelpers.interopDefault(_matchesStrictComparableJs);
var _toKeyJs = require('./_toKey.js');
var _toKeyJsDefault = _parcelHelpers.interopDefault(_toKeyJs);
/** Used to compose bitmasks for value comparisons.*/
var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
/**
* The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
*
* @private
* @param {string} path The path of the property to get.
* @param {*} srcValue The value to match.
* @returns {Function} Returns the new spec function.
*/
function baseMatchesProperty(path, srcValue) {
  if (_isKeyJsDefault.default(path) && _isStrictComparableJsDefault.default(srcValue)) {
    return _matchesStrictComparableJsDefault.default(_toKeyJsDefault.default(path), srcValue);
  }
  return function (object) {
    var objValue = _getJsDefault.default(object, path);
    return objValue === undefined && objValue === srcValue ? _hasInJsDefault.default(object, path) : _baseIsEqualJsDefault.default(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}
exports.default = baseMatchesProperty;
