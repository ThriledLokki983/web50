var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _composeArgsJs = require('./_composeArgs.js');
var _composeArgsJsDefault = _parcelHelpers.interopDefault(_composeArgsJs);
var _composeArgsRightJs = require('./_composeArgsRight.js');
var _composeArgsRightJsDefault = _parcelHelpers.interopDefault(_composeArgsRightJs);
var _countHoldersJs = require('./_countHolders.js');
var _countHoldersJsDefault = _parcelHelpers.interopDefault(_countHoldersJs);
var _createCtorJs = require('./_createCtor.js');
var _createCtorJsDefault = _parcelHelpers.interopDefault(_createCtorJs);
var _createRecurryJs = require('./_createRecurry.js');
var _createRecurryJsDefault = _parcelHelpers.interopDefault(_createRecurryJs);
var _getHolderJs = require('./_getHolder.js');
var _getHolderJsDefault = _parcelHelpers.interopDefault(_getHolderJs);
var _reorderJs = require('./_reorder.js');
var _reorderJsDefault = _parcelHelpers.interopDefault(_reorderJs);
var _replaceHoldersJs = require('./_replaceHolders.js');
var _replaceHoldersJsDefault = _parcelHelpers.interopDefault(_replaceHoldersJs);
var _rootJs = require('./_root.js');
var _rootJsDefault = _parcelHelpers.interopDefault(_rootJs);
/** Used to compose bitmasks for function metadata.*/
var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_ARY_FLAG = 128, WRAP_FLIP_FLAG = 512;
/**
* Creates a function that wraps `func` to invoke it with optional `this`
* binding of `thisArg`, partial application, and currying.
*
* @private
* @param {Function|string} func The function or method name to wrap.
* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
* @param {*} [thisArg] The `this` binding of `func`.
* @param {Array} [partials] The arguments to prepend to those provided to
*  the new function.
* @param {Array} [holders] The `partials` placeholder indexes.
* @param {Array} [partialsRight] The arguments to append to those provided
*  to the new function.
* @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
* @param {Array} [argPos] The argument positions of the new function.
* @param {number} [ary] The arity cap of `func`.
* @param {number} [arity] The arity of `func`.
* @returns {Function} Returns the new wrapped function.
*/
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : _createCtorJsDefault.default(func);
  function wrapper() {
    var length = arguments.length, args = Array(length), index = length;
    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = _getHolderJsDefault.default(wrapper), holdersCount = _countHoldersJsDefault.default(args, placeholder);
    }
    if (partials) {
      args = _composeArgsJsDefault.default(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = _composeArgsRightJsDefault.default(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = _replaceHoldersJsDefault.default(args, placeholder);
      return _createRecurryJsDefault.default(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
    }
    var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
    length = args.length;
    if (argPos) {
      args = _reorderJsDefault.default(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== _rootJsDefault.default && this instanceof wrapper) {
      fn = Ctor || _createCtorJsDefault.default(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}
exports.default = createHybrid;
