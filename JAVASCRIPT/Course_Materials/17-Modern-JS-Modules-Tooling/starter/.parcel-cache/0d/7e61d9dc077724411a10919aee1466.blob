var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _createPaddingJs = require('./_createPadding.js');
var _createPaddingJsDefault = _parcelHelpers.interopDefault(_createPaddingJs);
var _stringSizeJs = require('./_stringSize.js');
var _stringSizeJsDefault = _parcelHelpers.interopDefault(_stringSizeJs);
var _toIntegerJs = require('./toInteger.js');
var _toIntegerJsDefault = _parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require('./toString.js');
var _toStringJsDefault = _parcelHelpers.interopDefault(_toStringJs);
/*Built-in method references for those with the same name as other `lodash` methods.*/
var nativeCeil = Math.ceil, nativeFloor = Math.floor;
/**
* Pads `string` on the left and right sides if it's shorter than `length`.
* Padding characters are truncated if they can't be evenly divided by `length`.
*
* @static
* @memberOf _
* @since 3.0.0
* @category String
* @param {string} [string=''] The string to pad.
* @param {number} [length=0] The padding length.
* @param {string} [chars=' '] The string used as padding.
* @returns {string} Returns the padded string.
* @example
*
* _.pad('abc', 8);
* // => '  abc   '
*
* _.pad('abc', 8, '_-');
* // => '_-abc_-_'
*
* _.pad('abc', 3);
* // => 'abc'
*/
function pad(string, length, chars) {
  string = _toStringJsDefault.default(string);
  length = _toIntegerJsDefault.default(length);
  var strLength = length ? _stringSizeJsDefault.default(string) : 0;
  if (!length || strLength >= length) {
    return string;
  }
  var mid = (length - strLength) / 2;
  return _createPaddingJsDefault.default(nativeFloor(mid), chars) + string + _createPaddingJsDefault.default(nativeCeil(mid), chars);
}
exports.default = pad;
