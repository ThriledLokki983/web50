var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _applyJs = require('./_apply.js');
var _applyJsDefault = _parcelHelpers.interopDefault(_applyJs);
var _createCtorJs = require('./_createCtor.js');
var _createCtorJsDefault = _parcelHelpers.interopDefault(_createCtorJs);
var _rootJs = require('./_root.js');
var _rootJsDefault = _parcelHelpers.interopDefault(_rootJs);
/** Used to compose bitmasks for function metadata.*/
var WRAP_BIND_FLAG = 1;
/**
* Creates a function that wraps `func` to invoke it with the `this` binding
* of `thisArg` and `partials` prepended to the arguments it receives.
*
* @private
* @param {Function} func The function to wrap.
* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
* @param {*} thisArg The `this` binding of `func`.
* @param {Array} partials The arguments to prepend to those provided to
*  the new function.
* @returns {Function} Returns the new wrapped function.
*/
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG, Ctor = _createCtorJsDefault.default(func);
  function wrapper() {
    var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== _rootJsDefault.default && this instanceof wrapper ? Ctor : func;
    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return _applyJsDefault.default(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}
exports.default = createPartial;
