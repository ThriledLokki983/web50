var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseAssignValueJs = require('./_baseAssignValue.js');
var _baseAssignValueJsDefault = _parcelHelpers.interopDefault(_baseAssignValueJs);
var _baseForOwnJs = require('./_baseForOwn.js');
var _baseForOwnJsDefault = _parcelHelpers.interopDefault(_baseForOwnJs);
var _baseIterateeJs = require('./_baseIteratee.js');
var _baseIterateeJsDefault = _parcelHelpers.interopDefault(_baseIterateeJs);
/**
* The opposite of `_.mapValues`; this method creates an object with the
* same values as `object` and keys generated by running each own enumerable
* string keyed property of `object` thru `iteratee`. The iteratee is invoked
* with three arguments: (value, key, object).
*
* @static
* @memberOf _
* @since 3.8.0
* @category Object
* @param {Object} object The object to iterate over.
* @param {Function} [iteratee=_.identity] The function invoked per iteration.
* @returns {Object} Returns the new mapped object.
* @see _.mapValues
* @example
*
* _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
*   return key + value;
* });
* // => { 'a1': 1, 'b2': 2 }
*/
function mapKeys(object, iteratee) {
  var result = {};
  iteratee = _baseIterateeJsDefault.default(iteratee, 3);
  _baseForOwnJsDefault.default(object, function (value, key, object) {
    _baseAssignValueJsDefault.default(result, iteratee(value, key, object), value);
  });
  return result;
}
exports.default = mapKeys;
