var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseToStringJs = require('./_baseToString.js');
var _baseToStringJsDefault = _parcelHelpers.interopDefault(_baseToStringJs);
var _castSliceJs = require('./_castSlice.js');
var _castSliceJsDefault = _parcelHelpers.interopDefault(_castSliceJs);
var _hasUnicodeJs = require('./_hasUnicode.js');
var _hasUnicodeJsDefault = _parcelHelpers.interopDefault(_hasUnicodeJs);
var _isObjectJs = require('./isObject.js');
var _isObjectJsDefault = _parcelHelpers.interopDefault(_isObjectJs);
var _isRegExpJs = require('./isRegExp.js');
var _isRegExpJsDefault = _parcelHelpers.interopDefault(_isRegExpJs);
var _stringSizeJs = require('./_stringSize.js');
var _stringSizeJsDefault = _parcelHelpers.interopDefault(_stringSizeJs);
var _stringToArrayJs = require('./_stringToArray.js');
var _stringToArrayJsDefault = _parcelHelpers.interopDefault(_stringToArrayJs);
var _toIntegerJs = require('./toInteger.js');
var _toIntegerJsDefault = _parcelHelpers.interopDefault(_toIntegerJs);
var _toStringJs = require('./toString.js');
var _toStringJsDefault = _parcelHelpers.interopDefault(_toStringJs);
/** Used as default options for `_.truncate`.*/
var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
/** Used to match `RegExp` flags from their coerced string values.*/
var reFlags = /\w*$/;
/**
* Truncates `string` if it's longer than the given maximum string length.
* The last characters of the truncated string are replaced with the omission
* string which defaults to "...".
*
* @static
* @memberOf _
* @since 4.0.0
* @category String
* @param {string} [string=''] The string to truncate.
* @param {Object} [options={}] The options object.
* @param {number} [options.length=30] The maximum string length.
* @param {string} [options.omission='...'] The string to indicate text is omitted.
* @param {RegExp|string} [options.separator] The separator pattern to truncate to.
* @returns {string} Returns the truncated string.
* @example
*
* _.truncate('hi-diddly-ho there, neighborino');
* // => 'hi-diddly-ho there, neighbo...'
*
* _.truncate('hi-diddly-ho there, neighborino', {
*   'length': 24,
*   'separator': ' '
* });
* // => 'hi-diddly-ho there,...'
*
* _.truncate('hi-diddly-ho there, neighborino', {
*   'length': 24,
*   'separator': /,? +/
* });
* // => 'hi-diddly-ho there...'
*
* _.truncate('hi-diddly-ho there, neighborino', {
*   'omission': ' [...]'
* });
* // => 'hi-diddly-ho there, neig [...]'
*/
function truncate(string, options) {
  var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
  if (_isObjectJsDefault.default(options)) {
    var separator = ('separator' in options) ? options.separator : separator;
    length = ('length' in options) ? _toIntegerJsDefault.default(options.length) : length;
    omission = ('omission' in options) ? _baseToStringJsDefault.default(options.omission) : omission;
  }
  string = _toStringJsDefault.default(string);
  var strLength = string.length;
  if (_hasUnicodeJsDefault.default(string)) {
    var strSymbols = _stringToArrayJsDefault.default(string);
    strLength = strSymbols.length;
  }
  if (length >= strLength) {
    return string;
  }
  var end = length - _stringSizeJsDefault.default(omission);
  if (end < 1) {
    return omission;
  }
  var result = strSymbols ? _castSliceJsDefault.default(strSymbols, 0, end).join('') : string.slice(0, end);
  if (separator === undefined) {
    return result + omission;
  }
  if (strSymbols) {
    end += result.length - end;
  }
  if (_isRegExpJsDefault.default(separator)) {
    if (string.slice(end).search(separator)) {
      var match, substring = result;
      if (!separator.global) {
        separator = RegExp(separator.source, _toStringJsDefault.default(reFlags.exec(separator)) + 'g');
      }
      separator.lastIndex = 0;
      while (match = separator.exec(substring)) {
        var newEnd = match.index;
      }
      result = result.slice(0, newEnd === undefined ? end : newEnd);
    }
  } else if (string.indexOf(_baseToStringJsDefault.default(separator), end) != end) {
    var index = result.lastIndexOf(separator);
    if (index > -1) {
      result = result.slice(0, index);
    }
  }
  return result + omission;
}
exports.default = truncate;
