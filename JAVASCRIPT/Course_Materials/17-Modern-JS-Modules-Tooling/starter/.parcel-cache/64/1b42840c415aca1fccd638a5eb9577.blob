var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _baseDifferenceJs = require('./_baseDifference.js');
var _baseDifferenceJsDefault = _parcelHelpers.interopDefault(_baseDifferenceJs);
var _baseFlattenJs = require('./_baseFlatten.js');
var _baseFlattenJsDefault = _parcelHelpers.interopDefault(_baseFlattenJs);
var _baseRestJs = require('./_baseRest.js');
var _baseRestJsDefault = _parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeObjectJs = require('./isArrayLikeObject.js');
var _isArrayLikeObjectJsDefault = _parcelHelpers.interopDefault(_isArrayLikeObjectJs);
var _lastJs = require('./last.js');
var _lastJsDefault = _parcelHelpers.interopDefault(_lastJs);
/**
* This method is like `_.difference` except that it accepts `comparator`
* which is invoked to compare elements of `array` to `values`. The order and
* references of result values are determined by the first array. The comparator
* is invoked with two arguments: (arrVal, othVal).
*
* **Note:** Unlike `_.pullAllWith`, this method returns a new array.
*
* @static
* @memberOf _
* @since 4.0.0
* @category Array
* @param {Array} array The array to inspect.
* @param {...Array} [values] The values to exclude.
* @param {Function} [comparator] The comparator invoked per element.
* @returns {Array} Returns the new array of filtered values.
* @example
*
* var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
*
* _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
* // => [{ 'x': 2, 'y': 1 }]
*/
var differenceWith = _baseRestJsDefault.default(function (array, values) {
  var comparator = _lastJsDefault.default(values);
  if (_isArrayLikeObjectJsDefault.default(comparator)) {
    comparator = undefined;
  }
  return _isArrayLikeObjectJsDefault.default(array) ? _baseDifferenceJsDefault.default(array, _baseFlattenJsDefault.default(values, 1, _isArrayLikeObjectJsDefault.default, true), undefined, comparator) : [];
});
exports.default = differenceWith;
