var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _SetCacheJs = require('./_SetCache.js');
var _SetCacheJsDefault = _parcelHelpers.interopDefault(_SetCacheJs);
var _arrayIncludesJs = require('./_arrayIncludes.js');
var _arrayIncludesJsDefault = _parcelHelpers.interopDefault(_arrayIncludesJs);
var _arrayIncludesWithJs = require('./_arrayIncludesWith.js');
var _arrayIncludesWithJsDefault = _parcelHelpers.interopDefault(_arrayIncludesWithJs);
var _arrayMapJs = require('./_arrayMap.js');
var _arrayMapJsDefault = _parcelHelpers.interopDefault(_arrayMapJs);
var _baseUnaryJs = require('./_baseUnary.js');
var _baseUnaryJsDefault = _parcelHelpers.interopDefault(_baseUnaryJs);
var _cacheHasJs = require('./_cacheHas.js');
var _cacheHasJsDefault = _parcelHelpers.interopDefault(_cacheHasJs);
/*Built-in method references for those with the same name as other `lodash` methods.*/
var nativeMin = Math.min;
/**
* The base implementation of methods like `_.intersection`, without support
* for iteratee shorthands, that accepts an array of arrays to inspect.
*
* @private
* @param {Array} arrays The arrays to inspect.
* @param {Function} [iteratee] The iteratee invoked per element.
* @param {Function} [comparator] The comparator invoked per element.
* @returns {Array} Returns the new array of shared values.
*/
function baseIntersection(arrays, iteratee, comparator) {
  var includes = comparator ? _arrayIncludesWithJsDefault.default : _arrayIncludesJsDefault.default, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
  while (othIndex--) {
    var array = arrays[othIndex];
    if (othIndex && iteratee) {
      array = _arrayMapJsDefault.default(array, _baseUnaryJsDefault.default(iteratee));
    }
    maxLength = nativeMin(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new _SetCacheJsDefault.default(othIndex && array) : undefined;
  }
  array = arrays[0];
  var index = -1, seen = caches[0];
  outer: while (++index < length && result.length < maxLength) {
    var value = array[index], computed = iteratee ? iteratee(value) : value;
    value = comparator || value !== 0 ? value : 0;
    if (!(seen ? _cacheHasJsDefault.default(seen, computed) : includes(result, computed, comparator))) {
      othIndex = othLength;
      while (--othIndex) {
        var cache = caches[othIndex];
        if (!(cache ? _cacheHasJsDefault.default(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
          continue outer;
        }
      }
      if (seen) {
        seen.push(computed);
      }
      result.push(value);
    }
  }
  return result;
}
exports.default = baseIntersection;
