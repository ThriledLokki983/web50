var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _assignValueJs = require('./_assignValue.js');
var _assignValueJsDefault = _parcelHelpers.interopDefault(_assignValueJs);
var _copyObjectJs = require('./_copyObject.js');
var _copyObjectJsDefault = _parcelHelpers.interopDefault(_copyObjectJs);
var _createAssignerJs = require('./_createAssigner.js');
var _createAssignerJsDefault = _parcelHelpers.interopDefault(_createAssignerJs);
var _isArrayLikeJs = require('./isArrayLike.js');
var _isArrayLikeJsDefault = _parcelHelpers.interopDefault(_isArrayLikeJs);
var _isPrototypeJs = require('./_isPrototype.js');
var _isPrototypeJsDefault = _parcelHelpers.interopDefault(_isPrototypeJs);
var _keysJs = require('./keys.js');
var _keysJsDefault = _parcelHelpers.interopDefault(_keysJs);
/** Used for built-in method references.*/
var objectProto = Object.prototype;
/** Used to check objects for own properties.*/
var hasOwnProperty = objectProto.hasOwnProperty;
/**
* Assigns own enumerable string keyed properties of source objects to the
* destination object. Source objects are applied from left to right.
* Subsequent sources overwrite property assignments of previous sources.
*
* **Note:** This method mutates `object` and is loosely based on
* [`Object.assign`](https://mdn.io/Object/assign).
*
* @static
* @memberOf _
* @since 0.10.0
* @category Object
* @param {Object} object The destination object.
* @param {...Object} [sources] The source objects.
* @returns {Object} Returns `object`.
* @see _.assignIn
* @example
*
* function Foo() {
*   this.a = 1;
* }
*
* function Bar() {
*   this.c = 3;
* }
*
* Foo.prototype.b = 2;
* Bar.prototype.d = 4;
*
* _.assign({ 'a': 0 }, new Foo, new Bar);
* // => { 'a': 1, 'c': 3 }
*/
var assign = _createAssignerJsDefault.default(function (object, source) {
  if (_isPrototypeJsDefault.default(source) || _isArrayLikeJsDefault.default(source)) {
    _copyObjectJsDefault.default(source, _keysJsDefault.default(source), object);
    return;
  }
  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      _assignValueJsDefault.default(object, key, source[key]);
    }
  }
});
exports.default = assign;
