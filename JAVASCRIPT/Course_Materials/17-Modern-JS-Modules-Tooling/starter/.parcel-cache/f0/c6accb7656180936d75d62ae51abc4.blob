var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _arrayReduceRightJs = require('./_arrayReduceRight.js');
var _arrayReduceRightJsDefault = _parcelHelpers.interopDefault(_arrayReduceRightJs);
var _baseEachRightJs = require('./_baseEachRight.js');
var _baseEachRightJsDefault = _parcelHelpers.interopDefault(_baseEachRightJs);
var _baseIterateeJs = require('./_baseIteratee.js');
var _baseIterateeJsDefault = _parcelHelpers.interopDefault(_baseIterateeJs);
var _baseReduceJs = require('./_baseReduce.js');
var _baseReduceJsDefault = _parcelHelpers.interopDefault(_baseReduceJs);
var _isArrayJs = require('./isArray.js');
var _isArrayJsDefault = _parcelHelpers.interopDefault(_isArrayJs);
/**
* This method is like `_.reduce` except that it iterates over elements of
* `collection` from right to left.
*
* @static
* @memberOf _
* @since 0.1.0
* @category Collection
* @param {Array|Object} collection The collection to iterate over.
* @param {Function} [iteratee=_.identity] The function invoked per iteration.
* @param {*} [accumulator] The initial value.
* @returns {*} Returns the accumulated value.
* @see _.reduce
* @example
*
* var array = [[0, 1], [2, 3], [4, 5]];
*
* _.reduceRight(array, function(flattened, other) {
*   return flattened.concat(other);
* }, []);
* // => [4, 5, 2, 3, 0, 1]
*/
function reduceRight(collection, iteratee, accumulator) {
  var func = _isArrayJsDefault.default(collection) ? _arrayReduceRightJsDefault.default : _baseReduceJsDefault.default, initAccum = arguments.length < 3;
  return func(collection, _baseIterateeJsDefault.default(iteratee, 4), accumulator, initAccum, _baseEachRightJsDefault.default);
}
exports.default = reduceRight;
