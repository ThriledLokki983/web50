var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _rootJs = require('./_root.js');
var _rootJsDefault = _parcelHelpers.interopDefault(_rootJs);
var _toIntegerJs = require('./toInteger.js');
var _toIntegerJsDefault = _parcelHelpers.interopDefault(_toIntegerJs);
var _toNumberJs = require('./toNumber.js');
var _toNumberJsDefault = _parcelHelpers.interopDefault(_toNumberJs);
var _toStringJs = require('./toString.js');
var _toStringJsDefault = _parcelHelpers.interopDefault(_toStringJs);
/*Built-in method references for those with the same name as other `lodash` methods.*/
var nativeIsFinite = _rootJsDefault.default.isFinite, nativeMin = Math.min;
/**
* Creates a function like `_.round`.
*
* @private
* @param {string} methodName The name of the `Math` method to use when rounding.
* @returns {Function} Returns the new round function.
*/
function createRound(methodName) {
  var func = Math[methodName];
  return function (number, precision) {
    number = _toNumberJsDefault.default(number);
    precision = precision == null ? 0 : nativeMin(_toIntegerJsDefault.default(precision), 292);
    if (precision && nativeIsFinite(number)) {
      // Shift with exponential notation to avoid floating-point issues.
      // See [MDN](https://mdn.io/round#Examples) for more details.
      var pair = (_toStringJsDefault.default(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
      pair = (_toStringJsDefault.default(value) + 'e').split('e');
      return +(pair[0] + 'e' + (+pair[1] - precision));
    }
    return func(number);
  };
}
exports.default = createRound;
