var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _StackJs = require('./_Stack.js');
var _StackJsDefault = _parcelHelpers.interopDefault(_StackJs);
var _arrayEachJs = require('./_arrayEach.js');
var _arrayEachJsDefault = _parcelHelpers.interopDefault(_arrayEachJs);
var _assignValueJs = require('./_assignValue.js');
var _assignValueJsDefault = _parcelHelpers.interopDefault(_assignValueJs);
var _baseAssignJs = require('./_baseAssign.js');
var _baseAssignJsDefault = _parcelHelpers.interopDefault(_baseAssignJs);
var _baseAssignInJs = require('./_baseAssignIn.js');
var _baseAssignInJsDefault = _parcelHelpers.interopDefault(_baseAssignInJs);
var _cloneBufferJs = require('./_cloneBuffer.js');
var _cloneBufferJsDefault = _parcelHelpers.interopDefault(_cloneBufferJs);
var _copyArrayJs = require('./_copyArray.js');
var _copyArrayJsDefault = _parcelHelpers.interopDefault(_copyArrayJs);
var _copySymbolsJs = require('./_copySymbols.js');
var _copySymbolsJsDefault = _parcelHelpers.interopDefault(_copySymbolsJs);
var _copySymbolsInJs = require('./_copySymbolsIn.js');
var _copySymbolsInJsDefault = _parcelHelpers.interopDefault(_copySymbolsInJs);
var _getAllKeysJs = require('./_getAllKeys.js');
var _getAllKeysJsDefault = _parcelHelpers.interopDefault(_getAllKeysJs);
var _getAllKeysInJs = require('./_getAllKeysIn.js');
var _getAllKeysInJsDefault = _parcelHelpers.interopDefault(_getAllKeysInJs);
var _getTagJs = require('./_getTag.js');
var _getTagJsDefault = _parcelHelpers.interopDefault(_getTagJs);
var _initCloneArrayJs = require('./_initCloneArray.js');
var _initCloneArrayJsDefault = _parcelHelpers.interopDefault(_initCloneArrayJs);
var _initCloneByTagJs = require('./_initCloneByTag.js');
var _initCloneByTagJsDefault = _parcelHelpers.interopDefault(_initCloneByTagJs);
var _initCloneObjectJs = require('./_initCloneObject.js');
var _initCloneObjectJsDefault = _parcelHelpers.interopDefault(_initCloneObjectJs);
var _isArrayJs = require('./isArray.js');
var _isArrayJsDefault = _parcelHelpers.interopDefault(_isArrayJs);
var _isBufferJs = require('./isBuffer.js');
var _isBufferJsDefault = _parcelHelpers.interopDefault(_isBufferJs);
var _isMapJs = require('./isMap.js');
var _isMapJsDefault = _parcelHelpers.interopDefault(_isMapJs);
var _isObjectJs = require('./isObject.js');
var _isObjectJsDefault = _parcelHelpers.interopDefault(_isObjectJs);
var _isSetJs = require('./isSet.js');
var _isSetJsDefault = _parcelHelpers.interopDefault(_isSetJs);
var _keysJs = require('./keys.js');
var _keysJsDefault = _parcelHelpers.interopDefault(_keysJs);
var _keysInJs = require('./keysIn.js');
var _keysInJsDefault = _parcelHelpers.interopDefault(_keysInJs);
/** Used to compose bitmasks for cloning.*/
var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references.*/
var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`.*/
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
* The base implementation of `_.clone` and `_.cloneDeep` which tracks
* traversed objects.
*
* @private
* @param {*} value The value to clone.
* @param {boolean} bitmask The bitmask flags.
*  1 - Deep clone
*  2 - Flatten inherited properties
*  4 - Clone symbols
* @param {Function} [customizer] The function to customize cloning.
* @param {string} [key] The key of `value`.
* @param {Object} [object] The parent object of `value`.
* @param {Object} [stack] Tracks traversed objects and their clone counterparts.
* @returns {*} Returns the cloned value.
*/
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!_isObjectJsDefault.default(value)) {
    return value;
  }
  var isArr = _isArrayJsDefault.default(value);
  if (isArr) {
    result = _initCloneArrayJsDefault.default(value);
    if (!isDeep) {
      return _copyArrayJsDefault.default(value, result);
    }
  } else {
    var tag = _getTagJsDefault.default(value), isFunc = tag == funcTag || tag == genTag;
    if (_isBufferJsDefault.default(value)) {
      return _cloneBufferJsDefault.default(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : _initCloneObjectJsDefault.default(value);
      if (!isDeep) {
        return isFlat ? _copySymbolsInJsDefault.default(value, _baseAssignInJsDefault.default(result, value)) : _copySymbolsJsDefault.default(value, _baseAssignJsDefault.default(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = _initCloneByTagJsDefault.default(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new _StackJsDefault.default());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);
  if (_isSetJsDefault.default(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (_isMapJsDefault.default(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? _getAllKeysInJsDefault.default : _getAllKeysJsDefault.default : isFlat ? _keysInJsDefault.default : _keysJsDefault.default;
  var props = isArr ? undefined : keysFunc(value);
  _arrayEachJsDefault.default(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    _assignValueJsDefault.default(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}
exports.default = baseClone;
