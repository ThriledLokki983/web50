var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _arrayEachJs = require('./_arrayEach.js');
var _arrayEachJsDefault = _parcelHelpers.interopDefault(_arrayEachJs);
var _baseAssignValueJs = require('./_baseAssignValue.js');
var _baseAssignValueJsDefault = _parcelHelpers.interopDefault(_baseAssignValueJs);
var _bindJs = require('./bind.js');
var _bindJsDefault = _parcelHelpers.interopDefault(_bindJs);
var _flatRestJs = require('./_flatRest.js');
var _flatRestJsDefault = _parcelHelpers.interopDefault(_flatRestJs);
var _toKeyJs = require('./_toKey.js');
var _toKeyJsDefault = _parcelHelpers.interopDefault(_toKeyJs);
/**
* Binds methods of an object to the object itself, overwriting the existing
* method.
*
* **Note:** This method doesn't set the "length" property of bound functions.
*
* @static
* @since 0.1.0
* @memberOf _
* @category Util
* @param {Object} object The object to bind and assign the bound methods to.
* @param {...(string|string[])} methodNames The object method names to bind.
* @returns {Object} Returns `object`.
* @example
*
* var view = {
*   'label': 'docs',
*   'click': function() {
*     console.log('clicked ' + this.label);
*   }
* };
*
* _.bindAll(view, ['click']);
* jQuery(element).on('click', view.click);
* // => Logs 'clicked docs' when clicked.
*/
var bindAll = _flatRestJsDefault.default(function (object, methodNames) {
  _arrayEachJsDefault.default(methodNames, function (key) {
    key = _toKeyJsDefault.default(key);
    _baseAssignValueJsDefault.default(object, key, _bindJsDefault.default(object[key], object));
  });
  return object;
});
exports.default = bindAll;
