var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _getWrapDetailsJs = require('./_getWrapDetails.js');
var _getWrapDetailsJsDefault = _parcelHelpers.interopDefault(_getWrapDetailsJs);
var _insertWrapDetailsJs = require('./_insertWrapDetails.js');
var _insertWrapDetailsJsDefault = _parcelHelpers.interopDefault(_insertWrapDetailsJs);
var _setToStringJs = require('./_setToString.js');
var _setToStringJsDefault = _parcelHelpers.interopDefault(_setToStringJs);
var _updateWrapDetailsJs = require('./_updateWrapDetails.js');
var _updateWrapDetailsJsDefault = _parcelHelpers.interopDefault(_updateWrapDetailsJs);
/**
* Sets the `toString` method of `wrapper` to mimic the source of `reference`
* with wrapper details in a comment at the top of the source body.
*
* @private
* @param {Function} wrapper The function to modify.
* @param {Function} reference The reference function.
* @param {number} bitmask The bitmask flags. See `createWrap` for more details.
* @returns {Function} Returns `wrapper`.
*/
function setWrapToString(wrapper, reference, bitmask) {
  var source = reference + '';
  return _setToStringJsDefault.default(wrapper, _insertWrapDetailsJsDefault.default(source, _updateWrapDetailsJsDefault.default(_getWrapDetailsJsDefault.default(source), bitmask)));
}
exports.default = setWrapToString;
