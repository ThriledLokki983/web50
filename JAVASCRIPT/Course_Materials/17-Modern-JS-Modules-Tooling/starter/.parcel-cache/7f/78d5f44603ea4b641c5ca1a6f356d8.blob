var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _isFunctionJs = require('./isFunction.js');
var _isFunctionJsDefault = _parcelHelpers.interopDefault(_isFunctionJs);
var _isMaskedJs = require('./_isMasked.js');
var _isMaskedJsDefault = _parcelHelpers.interopDefault(_isMaskedJs);
var _isObjectJs = require('./isObject.js');
var _isObjectJsDefault = _parcelHelpers.interopDefault(_isObjectJs);
var _toSourceJs = require('./_toSource.js');
var _toSourceJsDefault = _parcelHelpers.interopDefault(_toSourceJs);
/**
* Used to match `RegExp`
* [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
*/
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari).*/
var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references.*/
var funcProto = Function.prototype, objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions.*/
var funcToString = funcProto.toString;
/** Used to check objects for own properties.*/
var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native.*/
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
* The base implementation of `_.isNative` without bad shim checks.
*
* @private
* @param {*} value The value to check.
* @returns {boolean} Returns `true` if `value` is a native function,
*  else `false`.
*/
function baseIsNative(value) {
  if (!_isObjectJsDefault.default(value) || _isMaskedJsDefault.default(value)) {
    return false;
  }
  var pattern = _isFunctionJsDefault.default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSourceJsDefault.default(value));
}
exports.default = baseIsNative;
