var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _applyJs = require('./_apply.js');
var _applyJsDefault = _parcelHelpers.interopDefault(_applyJs);
var _baseEachJs = require('./_baseEach.js');
var _baseEachJsDefault = _parcelHelpers.interopDefault(_baseEachJs);
var _baseInvokeJs = require('./_baseInvoke.js');
var _baseInvokeJsDefault = _parcelHelpers.interopDefault(_baseInvokeJs);
var _baseRestJs = require('./_baseRest.js');
var _baseRestJsDefault = _parcelHelpers.interopDefault(_baseRestJs);
var _isArrayLikeJs = require('./isArrayLike.js');
var _isArrayLikeJsDefault = _parcelHelpers.interopDefault(_isArrayLikeJs);
/**
* Invokes the method at `path` of each element in `collection`, returning
* an array of the results of each invoked method. Any additional arguments
* are provided to each invoked method. If `path` is a function, it's invoked
* for, and `this` bound to, each element in `collection`.
*
* @static
* @memberOf _
* @since 4.0.0
* @category Collection
* @param {Array|Object} collection The collection to iterate over.
* @param {Array|Function|string} path The path of the method to invoke or
*  the function invoked per iteration.
* @param {...*} [args] The arguments to invoke each method with.
* @returns {Array} Returns the array of results.
* @example
*
* _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
* // => [[1, 5, 7], [1, 2, 3]]
*
* _.invokeMap([123, 456], String.prototype.split, '');
* // => [['1', '2', '3'], ['4', '5', '6']]
*/
var invokeMap = _baseRestJsDefault.default(function (collection, path, args) {
  var index = -1, isFunc = typeof path == 'function', result = _isArrayLikeJsDefault.default(collection) ? Array(collection.length) : [];
  _baseEachJsDefault.default(collection, function (value) {
    result[++index] = isFunc ? _applyJsDefault.default(path, value, args) : _baseInvokeJsDefault.default(value, path, args);
  });
  return result;
});
exports.default = invokeMap;
