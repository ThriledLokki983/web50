var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _LodashWrapperJs = require('./_LodashWrapper.js');
var _LodashWrapperJsDefault = _parcelHelpers.interopDefault(_LodashWrapperJs);
var _flatRestJs = require('./_flatRest.js');
var _flatRestJsDefault = _parcelHelpers.interopDefault(_flatRestJs);
var _getDataJs = require('./_getData.js');
var _getDataJsDefault = _parcelHelpers.interopDefault(_getDataJs);
var _getFuncNameJs = require('./_getFuncName.js');
var _getFuncNameJsDefault = _parcelHelpers.interopDefault(_getFuncNameJs);
var _isArrayJs = require('./isArray.js');
var _isArrayJsDefault = _parcelHelpers.interopDefault(_isArrayJs);
var _isLaziableJs = require('./_isLaziable.js');
var _isLaziableJsDefault = _parcelHelpers.interopDefault(_isLaziableJs);
/** Error message constants.*/
var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to compose bitmasks for function metadata.*/
var WRAP_CURRY_FLAG = 8, WRAP_PARTIAL_FLAG = 32, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256;
/**
* Creates a `_.flow` or `_.flowRight` function.
*
* @private
* @param {boolean} [fromRight] Specify iterating from right to left.
* @returns {Function} Returns the new flow function.
*/
function createFlow(fromRight) {
  return _flatRestJsDefault.default(function (funcs) {
    var length = funcs.length, index = length, prereq = _LodashWrapperJsDefault.default.prototype.thru;
    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (prereq && !wrapper && _getFuncNameJsDefault.default(func) == 'wrapper') {
        var wrapper = new _LodashWrapperJsDefault.default([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];
      var funcName = _getFuncNameJsDefault.default(func), data = funcName == 'wrapper' ? _getDataJsDefault.default(func) : undefined;
      if (data && _isLaziableJsDefault.default(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
        wrapper = wrapper[_getFuncNameJsDefault.default(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = func.length == 1 && _isLaziableJsDefault.default(func) ? wrapper[funcName]() : wrapper.thru(func);
      }
    }
    return function () {
      var args = arguments, value = args[0];
      if (wrapper && args.length == 1 && _isArrayJsDefault.default(value)) {
        return wrapper.plant(value).value();
      }
      var index = 0, result = length ? funcs[index].apply(this, args) : value;
      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}
exports.default = createFlow;
