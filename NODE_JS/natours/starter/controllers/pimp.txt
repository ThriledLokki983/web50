
API
* Implement restriction that users can only review a tour that they have actually booked

* Implement nested booking routes: /tours/:id/bookings and users/:id/bookings

* Improve tour dates: 
    add a participants and a soldOut field to each date. A date then becomes like an instance of the tour. Then, when a user books, they need to select one of the dates. A new booking will increase the number of participants in the date, until it is booked out (participants > maxGroupSize). So, when a user wants to book, you need to check if tour on the selected date is still available

* Implement advance authentication features: confirm user email, keep users in with refresh tokens, two-factor authentication, etc

WEBSITE
- Implement a signup form, similar to the login form
- add a review directly on the website if a user has taken a tour
- Hid the entire booking section on the tour detail page if current user has already booked tours (prevent duplicate bookings on the model)

- Implement "like tour" functionality with favorite tour page
- Implement my reviews page, where all reviews are displayed, and a user can edit them. 
For admins - "Manage page
 where they can CRUD tours, users, reviews and bookings 