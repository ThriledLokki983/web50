type: edu
files:
- name: blog/templates/blog/post_list.html
  visible: true
  text: |
    <html>
        <head>
            <title>Name your blog</title>
        </head>
        <body>
            <div>
                <h1><a href="">Repeat your blog name</a></h1>
            </div>

            Add your first post here
        </body>
    </html>
  learner_created: false
- name: manage.py
  visible: true
  text: |
    #!/usr/bin/env python
    import os
    import sys

    if __name__ == "__main__":
        os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")
        try:
            from django.core.management import execute_from_command_line
        except ImportError:
            # The above import may fail for some other reason. Ensure that the
            # issue is really that Django is missing to avoid masking other
            # exceptions on Python 2.
            try:
                import django
            except ImportError:
                raise ImportError(
                    "Couldn't import Django. Are you sure it's installed and "
                    "available on your PYTHONPATH environment variable? Did you "
                    "forget to activate a virtual environment?"
                )
            raise
        execute_from_command_line(sys.argv)
  learner_created: false
- name: blog/views.py
  visible: true
  placeholders:
  - offset: 117
    length: 43
    placeholder_text: pass blog/post_list.html template file here
    initial_state:
      length: 43
      offset: 117
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: blog/post_list.html
  text: |
    from django.shortcuts import render

    from .models import Post


    def post_list(request):

        return render(request, 'pass blog/post_list.html template file here', {})
  learner_created: false
- name: blog/apps.py
  visible: true
  text: |
    from __future__ import unicode_literals

    from django.apps import AppConfig


    class BlogConfig(AppConfig):
        name = 'blog'
  learner_created: false
- name: mysite/settings.py
  visible: true
  placeholders:
  - offset: 2925
    length: 21
    placeholder_text: use correct time zone
    dependency:
      lesson: lesson1
      task: task3
      file: mysite/settings.py
      placeholder: 1
      is_visible: true
    initial_state:
      length: 21
      offset: 2925
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: UTC
  text: |
    """
    Django settings for mysite project.

    Generated by 'django-admin startproject' using Django 1.10.3.

    For more information on this file, see
    https://docs.djangoproject.com/en/1.10/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/1.10/ref/settings/
    """

    import os

    # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = '-^c-ih(z2-7ze$jmth7bx+$=r&k@kl=9zm%iuopp7i&l0*#1ah'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'blog',
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'mysite.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'mysite.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/1.10/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/1.10/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'use correct time zone'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/1.10/howto/static-files/

    STATIC_URL = '/static/'
  learner_created: false
- name: mysite/__init__.py
  visible: true
  learner_created: false
- name: blog/admin.py
  visible: true
  text: |
    from django.contrib import admin

    # Register your models here.
  learner_created: false
- name: blog/models.py
  visible: true
  placeholders:
  - offset: 76
    length: 37
    placeholder_text: inherit Post from django models.Model
    dependency:
      lesson: lesson1
      task: task2
      file: blog/models.py
      placeholder: 1
      is_visible: true
    initial_state:
      length: 37
      offset: 76
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: models.Model
  - offset: 164
    length: 57
    placeholder_text: define title as a CharField with max length equals to 200
    dependency:
      lesson: lesson1
      task: task2
      file: blog/models.py
      placeholder: 2
      is_visible: true
    initial_state:
      length: 57
      offset: 164
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: title = models.CharField(max_length=200)
  - offset: 318
    length: 40
    placeholder_text: define published_date as a DateTimeField
    dependency:
      lesson: lesson1
      task: task2
      file: blog/models.py
      placeholder: 3
      is_visible: true
    initial_state:
      length: 40
      offset: 318
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: published_date = models.DateTimeField(blank=True, null=True)
  text: |
    from django.db import models
    from django.utils import timezone


    class Post(inherit Post from django models.Model):
        author = models.ForeignKey('auth.User')
        define title as a CharField with max length equals to 200
        text = models.TextField()
        created_date = models.DateTimeField(default=timezone.now)
        define published_date as a DateTimeField

        def publish(self):
            self.published_date = timezone.now()
            self.save()

        def __str__(self):
            return self.title
  learner_created: false
- name: mysite/wsgi.py
  visible: true
  text: |
    """
    WSGI config for mysite project.

    It exposes the WSGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/1.10/howto/deployment/wsgi/
    """

    import os

    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "mysite.settings")

    application = get_wsgi_application()
  learner_created: false
- name: blog/__init__.py
  visible: true
  learner_created: false
- name: blog/urls.py
  visible: true
  placeholders:
  - offset: 74
    length: 52
    placeholder_text: Map pattern for empty string to post_list from views
    dependency:
      lesson: lesson1
      task: task3
      file: blog/urls.py
      placeholder: 1
      is_visible: true
    initial_state:
      length: 52
      offset: 74
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: url(r'^$', views.post_list, name='post_list'),
  text: |
    from django.conf.urls import url
    from . import views

    urlpatterns = [
        Map pattern for empty string to post_list from views
    ]
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    from test_helper import failed, passed, get_answer_placeholders, test_answer_placeholders_text_deleted, \
        test_is_not_empty


    def test_answer_placeholders():
        placeholders = get_answer_placeholders()
        placeholder = placeholders[0]
        if "blog" in placeholder and "post_list.html" in placeholder:
            passed()
        else:
            failed("Please, render blog/post_list.html template")


    if __name__ == '__main__':
        test_is_not_empty()
        test_answer_placeholders_text_deleted()
        test_answer_placeholders()


  learner_created: false
status: Unchecked
record: -1
