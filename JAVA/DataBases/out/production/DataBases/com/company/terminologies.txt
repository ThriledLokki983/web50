
Database -- the container for all the data that you store
Database Dictionary -- provides a comprehensive list of the structure and types of data in the database
Table -- a collection of related data held in the database
Field -- a basic unit of data in a table
Column -- is another name for field
Row -- a single set of data containing all the columns in the table
Flat File Database -- stores all data in a single table -- not fairly used anymore
View -- is a selection of rows and columns, possible from more than one table


SELECT artists.name as Artist_Name, albums.name as Album_Name, songs.title as Song_Title FROM songs
INNER JOIN albums ON songs.album = albums._id
INNER JOIN artists ON albums.artist = artists._id
WHERE artists.name LIKE "%jefferson%"
ORDER BY artists.name, albums.name, songs.track
 LIMIT 25;


CREATE VIEW artist_list AS
SELECT artists.name AS Artist_Name, albums.name as Album_Name, songs.track AS Song_Track, songs.title AS Song_Title FROM songs
INNER JOIN albums ON albums._id = songs.album
INNER JOIN artists ON albums.artist = artists._id
ORDER BY artists.name, albums.name, songs.track;

// Q1
SELECT title FROM songs INNER JOIN albums ON albums._id = songs.album WHERE albums.name LIKE "%Forbidden%";

// Q2
SELECT songs.title AS Song_Title, songs.track AS Song_Track FROM songs INNER JOIN albums ON albums._id = songs.album WHERE albums.name LIKE "%Forbidden%"
ORDER BY songs.track;

//Q3
SELECT songs.title AS Song_Title, artists.name AS Artist_name FROM songs
INNER JOIN albums ON albums._id = songs.album
INNER JOIN artists ON albums.artist = artists._id
WHERE artists.name = "Deep Purple";

//Q4
UPDATE artists SET name="One Kitten" WHERE name="Mehitabel";

//Q5
SELECT * FROM artists where name="One Kitten";
SELECT * FROM artists where name="Mehitabel";

//Q6
SELECT songs.title AS Song_Title FROM songs INNER JOIN albums ON albums._id = songs.album
INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = "Aerosmith"
ORDER BY songs.title COLLATE NOCASE;

//Q7
SELECT count(songs.title) FROM songs
INNER JOIN albums ON albums._id = songs.album
INNER JOIN artists ON albums.artist = artists._id
WHERE artists.name = "Aerosmith"
ORDER BY songs.title COLLATE NOCASE;

//Q8
SELECT DISTINCT(songs.title) FROM songs INNER JOIN albums ON albums._id = songs.album INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = "Aerosmith" ORDER BY songs.title COLLATE NOCASE;

//Q9
SELECT count(DISTINCT(songs.title)) FROM songs INNER JOIN albums ON albums._id = songs.album INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = "Aerosmith" ORDER BY songs.title COLLATE NOCASE;

//Q10
SELECT count (DISTINCT(songs.title)), count (DISTINCT(artists.name)) FROM songs INNER JOIN albums ON albums._id = songs.album INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = "Aerosmith" ORDER BY songs.title COLLATE NOCASE;


//Q11
SELECT count (DISTINCT(songs.title)), count (DISTINCT(artists.name)), count (DISTINCT(albums.name)) FROM songs INNER JOIN albums ON albums._id = songs.album INNER JOIN artists ON albums.artist = artists._id WHERE artists.name = "Aerosmith" ORDER BY songs.title COLLATE NOCASE;